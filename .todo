config/* tests:
==============

We need to verify that the configs that go into configs/ are:

 a) syntactically good json (or python, eventually).
 b) present a well-formed config
 c) are acceptable for the script(s) they're designed for (this will require
    more info, like a config dtd equivalent, for what's optional and what's
    required and what format they will be.)


Cross-platform tests
====================

I'm developing on OSX and running pretty much on linux.
I want mozharness to be usable on Windows, however.

That doesn't mean that every single script needs to be runnable on Windows;
linux- or osx- specific scripts can be as platform-specific as they want
to be.

What I want x-platform tests for is lib/base/* and anything else where we
want to support Windows.


self.config audit
=================

You can end up putting stuff into your configs that ends up being orphaned,
and you never know without a lot of digging.

"Will changing config['option1'] do what I want? Will it break anything?
 Will it *do* anything? What actually uses this config?"

Something I want is a self.config audit.  Basically:

a) these are the list of all configs that get set by either script-defaults,
   command line, or config files for this family of scripts and config files.
b) this is how often each one gets called, and by which scripts
   (and what method?)
c) look at the list and prune the unneeded config options.

There may be a python tool that can do this that I don't know about.
Also, since self.config is always a ReadOnlyDict, we could either modify
that or subclass it (or w/e) to tally up whenever one of the config dict's
keys/values are referenced.


auto-run
========

This should be simple, but I haven't figured it out yet.
How do I get every script to automatically self.run() then self.summary()?
I'd usually put it in BaseScript.__init__() at the end, but then I can't
fix things in child __init__() functions.

Maybe BaseScript.__init__() needs to self.additionalConfiguration(),
self.run(), self.summary().  Kinda ugly.  So is calling self.run()
and self.summary() in every child script.

I'm hoping for an elegant solution but will not be surprised if there isn't
one.
